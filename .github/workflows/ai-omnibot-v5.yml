name: ai-omnibot-v5

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      mode:
        description: "Run mode"
        type: choice
        default: full_cycle
        options: [bootstrap, deploy, full_cycle]
      rss_urls:
        description: "CSV RSS URLs (override)"
        required: false
      with_ipns:
        description: "Publish IPNS?"
        type: boolean
        default: true
  schedule:
    - cron: "*/30 * * * *"

permissions:
  contents: write

concurrency:
  group: ai-omnibot-v5-${{ github.ref }}-${{ github.event_name }}
  cancel-in-progress: false

jobs:
  run:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm

      - name: Install deps
        run: |
          sudo apt-get update -y && sudo apt-get install -y jq
          npm i rss-parser@3 files-from-path@latest @web3-storage/w3up-client@latest node-fetch@3

      # ---------- BUILD SITE (ingest → rank → render) ----------
      - name: Build site
        env:
          RSS_URLS: ${{ inputs.rss_urls || vars.RSS_URLS }}

          # Payments (YOUR data)
          PAYMENT_MOMO: "0567892030"
          PAYMENT_VCB: "9567892030"
          PAYMENT_USDT_ERC20: "0x5da80d0f7e2df3cb0aa73d6a942bbe36b046b8f0"
          PAYMENT_ETH: "0x54E15A7b6d4213beE87800432A151d794638E3C2"
          PAYMENT_PAYPAL: "vumumabada@gmail.com"

          # Referral (YOUR data)
          REF_BINANCE: "https://www.binance.com/referral/earn-together/refer-in-hotsummer/claim?hl=vi&ref=GRO_20338_9V44N"
          REF_ALGOSONE: "https://algosone.page.link/MbtR"
          REF_LINKS: ${{ vars.REF_LINKS }} # optional CSV extra links

          # Site meta (optional)
          SITE_TITLE: ${{ vars.SITE_TITLE || 'AI Omnibot v5' }}
          SITE_DESC:  ${{ vars.SITE_DESC  || 'Auto opportunity finder • Web2↔Web3' }}
          SITE_BASE:  ${{ vars.SITE_BASE  || '' }}
        run: |
          node --input-type=module - <<'NODE'
          import fs from 'fs'
          import Parser from 'rss-parser'
          const parser = new Parser()

          // --- 1) Ingest RSS
          const rssList=(process.env.RSS_URLS||'').split(',').map(s=>s.trim()).filter(Boolean)
          let items=[]
          for (const url of rssList){
            try {
              const feed=await parser.parseURL(url)
              for(const it of (feed.items||[])){
                items.push({title:it.title||'',link:it.link||'#',date:it.isoDate||it.pubDate||'',src:url})
              }
            } catch(e){ console.log('RSS error', url, e.message) }
          }
          fs.mkdirSync('data',{recursive:true})
          fs.writeFileSync('data/opps.raw.json', JSON.stringify(items,null,2))

          // --- 2) Rank (simple keywords)
          const kw=/sale|discount|grant|bounty|sponsor|funding|airdrop|job|affiliate|referral|bnb|algos?one|algorand|algo|yield|arbitrage|bonus|coupon/i
          const scored=items.map(it=>({ ...it, score: kw.test(((it.title||'')+' '+(it.src||'')).toLowerCase())?1:0 }))
                            .filter(x=>x.score>0).sort((a,b)=>b.score-a.score)
          fs.writeFileSync('data/opps.scored.json', JSON.stringify(scored,null,2))

          // --- 3) Render HTML + RSS + sitemap
          const title=process.env.SITE_TITLE
          const desc =process.env.SITE_DESC
          const base =process.env.SITE_BASE

          const pays=[
            ['MoMo', process.env.PAYMENT_MOMO],
            ['Vietcombank', process.env.PAYMENT_VCB],
            ['USDT (ERC20)', process.env.PAYMENT_USDT_ERC20],
            ['ETH', process.env.PAYMENT_ETH],
            ['PayPal', process.env.PAYMENT_PAYPAL],
          ].filter(([,v])=>v)

          const extra=(process.env.REF_LINKS||'').split(',').map(s=>s.trim()).filter(Boolean)
          const refs=[
            process.env.REF_BINANCE,
            process.env.REF_ALGOSONE,
            ...extra
          ].filter(Boolean)

          const pickRef=(text, fallback)=>{
            const t=(text||'').toLowerCase()
            if (t.includes('binance') || t.includes('bnb')) return process.env.REF_BINANCE || fallback
            if (t.includes('algosone') || t.includes('algo')) return process.env.REF_ALGOSONE || fallback
            return fallback
          }

          const listHtml=(scored||[]).slice(0,80).map(it=>{
            const link=pickRef((it.title||'')+' '+(it.src||''), it.link||'#')
            return `<div class="card"><a href="${link}" target="_blank" rel="noopener">${it.title||'Opportunity'}</a><div class="meta">${it.src||''} • ${it.date||''}</div></div>`
          }).join('') || '<p>No data yet. Configure RSS_URLS variable.</p>'

          const paysHtml = pays.map(([k,v]) => k==='PayPal'
            ? `<div>${k}: <a href="mailto:${v}">${v}</a></div>`
            : `<div>${k}: <code>${v}</code></div>`
          ).join('') || '<div>Not configured</div>'

          const refsHtml = refs.length ? refs.map(u=>`<li><a href="${u}" target="_blank" rel="noopener">${u}</a></li>`).join('') : '<li>None</li>'

          const html = `<!doctype html><html lang="vi"><head><meta charset="utf-8">
          <meta name="viewport" content="width=device-width,initial-scale=1">
          <title>${title}</title><meta name="description" content="${desc}">
          <style>
            body{font-family:system-ui,Arial,sans-serif;margin:2rem;line-height:1.55}
            .grid{display:grid;grid-template-columns:repeat(auto-fit,minmax(280px,1fr));gap:12px}
            .card{border:1px solid #ddd;border-radius:10px;padding:12px;background:#fff}
            .box{border:1px dashed #ccc;border-radius:10px;padding:12px;margin:12px 0;background:#fafafa}
            code{background:#f5f5f5;padding:2px 6px;border-radius:6px}
            a{color:#0b61ff;text-decoration:none}
          </style></head><body>
            <h1>${title}</h1><p>${desc}</p>
            <div class="box"><h3>Payments</h3>${paysHtml}</div>
            <div class="card"><h3>Referral Links</h3><ul>${refsHtml}</ul></div>
            <h2 style="margin-top:20px">Opportunities</h2>
            <div class="grid">${listHtml}</div>
            <footer><hr/><small>Powered by AI Omnibot v5 — Web2↔Web3</small> ·
              <a href="${base||''}/sitemap.xml">sitemap</a> · <a href="${base||''}/feed.xml">RSS</a></footer>
          </body></html>`
          fs.writeFileSync('index.html', html)

          const mkItem = it => `<item><title><![CDATA[${it.title||'Opportunity'}]]></title><link>${it.link||'#'}</link><pubDate>${it.date||''}</pubDate><guid>${it.link||'#'}</guid></item>`
          const rss = `<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"><channel>
            <title>${title}</title><link>${base||''}</link><description>${desc}</description>
            ${(scored||[]).slice(0,50).map(mkItem).join('')}
          </channel></rss>`
          fs.writeFileSync('feed.xml', rss)

          const url=(p)=> (base?`${base}/${p}`:p)
          const sm = `<?xml version="1.0" encoding="UTF-8"?><urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9">
            <url><loc>${url('index.html')}</loc></url>
          </urlset>`
          fs.writeFileSync('sitemap.xml', sm)
          NODE

      - name: Commit site
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add -A
          git diff --cached --quiet || git commit -m "omnibot v5: update site/data"
          git push

      # ---------- OPTIONAL: Deploy to IPFS/IPNS if UCAN secrets are present ----------
      - name: Deploy to IPFS/IPNS (optional)
        env:
          W3UP_DELEGATION:     ${{ secrets.W3UP_DELEGATION }}
          W3UP_PRINCIPAL_JSON: ${{ secrets.W3UP_PRINCIPAL_JSON }}
          W3UP_SPACE_DID:      ${{ secrets.W3UP_SPACE_DID }}
          WITH_IPNS:           ${{ inputs.with_ipns }}
        run: |
          set -e
          if [ -z "${W3UP_DELEGATION}" ] || [ -z "${W3UP_PRINCIPAL_JSON}" ]; then
            echo "No UCAN secrets → skip deploy"; exit 0
          fi
          node --input-type=module - <<'NODE'
          import fs from 'fs'
          import * as w3 from '@web3-storage/w3up-client'
          import { filesFromPath } from 'files-from-path'
          const delegationStr=process.env.W3UP_DELEGATION
          const principalJson=JSON.parse(process.env.W3UP_PRINCIPAL_JSON)
          const spaceDid=process.env.W3UP_SPACE_DID||null
          const withIPNS=(process.env.WITH_IPNS||'true')==='true'
          const signer=await w3.ed25519.Signer.import(principalJson)
          const client=await w3.create({ principal: signer })
          await client.addSpace(delegationStr)
          if(spaceDid) await client.setCurrentSpace(spaceDid)
          const files=await filesFromPath('./')
          const cid=await client.uploadDirectory(files)
          let ipns=null
          if(withIPNS){ await client.capability.name.claim().catch(()=>{}); const res=await client.capability.name.publish(cid); ipns=res.name }
          const ipfs='https://cloudflare-ipfs.com/ipfs/'+cid.toString()
          console.log('CID:', cid.toString())
          console.log('IPFS:', ipfs)
          if(ipns) console.log('IPNS:', 'https://cloudflare-ipfs.com/ipns/'+ipns)
          fs.writeFileSync('ipfs-cid.txt', cid.toString()+'\n')
          fs.writeFileSync('ipfs-gateway.txt', ipfs+'\n')
          if(ipns) fs.writeFileSync('ipns-name.txt', ipns+'\n')
          NODE
