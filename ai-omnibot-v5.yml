name: ai-omnibot-v19.0-zerocost-hyperledger-infinity-ultra-optimized

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      mode:
        description: "Run mode"
        type: choice
        default: hyperledger-infinity-ultra-optimized
        options: [hyperledger-infinity-ultra-optimized]
      confidence_threshold:
        description: "AI score threshold 0..1 for LIVE actions"
        default: "0.99999999"
      live:
        description: "LIVE actions? (true/false)"
        default: "false"
  schedule:
    - cron: "*/5 * * * *"  # chạy ngắn, không while(true)

permissions:
  contents: write            # cho phép tạo/ cập nhật Issue "landing"
  actions: read
  issues: write
  pull-requests: write

concurrency:
  group: ai-omnibot-v19.0-${{ github.ref }}-${{ github.event_name }}
  cancel-in-progress: true

env:
  # ====== PAYMENT WALLETS (nhúng sẵn) ======
  WALLET_MOMO: "0567892030"
  WALLET_VCB: "9567892030"
  WALLET_PAYPAL: "vumumabada@gmail.com"
  WALLET_USDT_ERC20: "0x5da80d0f7e2df3cb0aa73d6a942bbe36b046b8f0"
  WALLET_ETH: "0x54E15A7b6d4213beE87800432A151d794638E3C2"

  # ====== AFFILIATE LINKS (auto-UTM) ======
  BINANCE_REF_BASE: "https://www.binance.com/referral/earn-together/refer-in-hotsummer/claim?hl=vi&ref=GRO_20338_9V44N"
  ALGOSONE_REF_BASE: "https://algosone.page.link/MbtR"
  UTM: "utm_source=gh-actions&utm_medium=omnibot-v19&utm_campaign=ai-revenue"

  # API placeholders (có thể thay bằng Variables sau)
  MONITORING_ENDPOINT: ${{ vars.MONITORING_ENDPOINT || 'https://status.api/monitor' }}
  LEGAL_API_URL:       ${{ vars.LEGAL_API_URL       || 'https://legal.api/check' }}
  REVENUE_API_URL:     ${{ vars.REVENUE_API_URL     || 'https://revenue.api/pulse' }}
  SOCIAL_API_URL:      ${{ vars.SOCIAL_API_URL      || 'https://social.api/campaign' }}
  LLM_API_URL:         ${{ vars.LLM_API_URL         || 'https://llm.api/chat' }}

  LIVE: ${{ github.event.inputs.live || 'false' }}

jobs:
  bootstrap:
    name: Bootstrap
    runs-on: ubuntu-latest
    timeout-minutes: 10
    outputs:
      binance_ref: ${{ steps.refs.outputs.binance_ref }}
      algosone_ref: ${{ steps.refs.outputs.algosone_ref }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
      - id: refs
        name: Build UTM’d refs
        run: |
          echo "binance_ref=${BINANCE_REF_BASE}&${UTM}" >> $GITHUB_OUTPUT
          echo "algosone_ref=${ALGOSONE_REF_BASE}?${UTM}" >> $GITHUB_OUTPUT

  # === Landing tự động: 1 Issue cố định chứa TẤT CẢ ví + link (dễ share, dễ pin) ===
  landing:
    name: Build/Update Landing (Pinned Issue)
    needs: bootstrap
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - name: Create/Update landing issue
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          BINANCE_REF: ${{ needs.bootstrap.outputs.binance_ref }}
          ALGOSONE_REF: ${{ needs.bootstrap.outputs.algosone_ref }}
          REPO: ${{ github.repository }}
        run: |
          TITLE="Landing — Payments & Referral Links"
          BODY=$(cat <<'EOF'
          # Cổng thanh toán & Link giới thiệu (Auto)
          > *Trang landing này được cập nhật tự động bởi ai-omnibot-v19*

          ## Thanh toán
          - **MoMo:** `'"$WALLET_MOMO"'`
          - **Vietcombank:** `'"$WALLET_VCB"'`
          - **USDT (ERC20):** `'"$WALLET_USDT_ERC20"'`
          - **ETH (Web3):** `'"$WALLET_ETH"'`
          - **PayPal:** `'"$WALLET_PAYPAL"'`

          ## Link giới thiệu (đã gắn UTM)
          - **Binance:** [Đăng ký & nhận ưu đãi]('"$BINANCE_REF"')
          - **AlgosOne:** [Mở tài khoản AlgosOne]('"$ALGOSONE_REF"')

          ---
          **Gợi ý CTA:**  
          - Đăng ký tài khoản → KYC → Nạp lần đầu để kích hoạt ưu đãi.  
          - Cần hỗ trợ? Hãy trả lời Issue này (tự động ghi log).
          EOF
          )
          # Tìm issue trùng tiêu đề
          ISSUE_NUMBER=$(gh issue list -R "$REPO" --search "$TITLE in:title" --state open --json number,title | jq -r '.[0].number // empty')
          if [ -z "$ISSUE_NUMBER" ]; then
            gh issue create -R "$REPO" --title "$TITLE" --body "$BODY" >/dev/null
          else
            gh issue edit "$ISSUE_NUMBER" -R "$REPO" --body "$BODY" >/dev/null
          fi
          echo "Landing issue updated."

  # === Health-check ngắn gọn (không while(true)) ===
  health-check:
    name: Health Check
    needs: bootstrap
    runs-on: ubuntu-latest
    timeout-minutes: 6
    steps:
      - uses: actions/setup-node@v4
        with:
          node-version: 20
      - name: Probe services
        run: |
          node --input-type=module <<'NODE'
          import fetch from 'node-fetch'
          const urls = ['https://ipfs.io/health','https://arweave.net/health','https://cloudflare.com/cdn-cgi/trace']
          const out=[]
          for (const u of urls){
            try{
              const c = new AbortController()
              const t = setTimeout(()=>c.abort(),1500)
              const r = await fetch(u,{signal:c.signal})
              clearTimeout(t)
              out.push({url:u, ok:r.ok, status:r.status})
            }catch(e){ out.push({url:u, ok:false, err:e.message})}
          }
          console.log(JSON.stringify(out,null,2))
          if (out.every(x=>!x.ok)) process.exit(2)
          NODE

  # === Kiểm tra compliance (one-shot) ===
  legal-compliance:
    name: Legal Compliance
    needs: bootstrap
    runs-on: ubuntu-latest
    timeout-minutes: 6
    steps:
      - uses: actions/setup-node@v4
        with:
          node-version: 20
      - name: Check licenses (skip if missing)
        env:
          MOMO_LICENSE: ${{ secrets.MOMO_LICENSE || '' }}
          VIETCOMBANK_LICENSE: ${{ secrets.VIETCOMBANK_LICENSE || '' }}
        run: |
          node --input-type=module <<'NODE'
          import fetch from 'node-fetch'
          const svcs=[{n:'MoMo',lic:process.env.MOMO_LICENSE,e:'https://api.momo.vn/license'},
                      {n:'Vietcombank',lic:process.env.VIETCOMBANK_LICENSE,e:'https://api.vietcombank.vn/license'}]
          const res=[]
          for(const s of svcs){
            if(!s.lic){res.push({service:s.n,skipped:true}); continue}
            try{
              const r=await fetch(s.e,{method:'POST',headers:{'content-type':'application/json'},body:JSON.stringify({license:s.lic})})
              res.push({service:s.n,ok:r.ok,status:r.status})
            }catch(e){res.push({service:s.n,ok:false,error:e.message})}
          }
          console.log(JSON.stringify(res,null,2))
          NODE

  # === Revenue pulse: ưu tiên Affiliate, log Artifact ===
  revenue-pulse:
    name: Revenue Pulse (Affiliate-first)
    needs: [bootstrap, landing, health-check]
    runs-on: ubuntu-latest
    timeout-minutes: 8
    steps:
      - uses: actions/setup-node@v4
        with:
          node-version: 20
      - id: pulse
        name: Build payload & results
        env:
          LIVE: ${{ env.LIVE }}
          BINANCE_REF: ${{ needs.bootstrap.outputs.binance_ref }}
          ALGOSONE_REF: ${{ needs.bootstrap.outputs.algosone_ref }}
        run: |
          mkdir -p out
          cat > out/revenue-input.json <<EOF
          {
            "live": "${LIVE}",
            "wallets": {
              "momo": "${WALLET_MOMO}",
              "vietcombank": "${WALLET_VCB}",
              "paypal": "${WALLET_PAYPAL}",
              "usdt_erc20": "${WALLET_USDT_ERC20}",
              "eth": "${WALLET_ETH}"
            },
            "refs": {
              "binance": "${BINANCE_REF}",
              "algosone": "${ALGOSONE_REF}"
            }
          }
          EOF
          # Kênh placeholder khác bỏ qua - tập trung Affiliate làm tiền thật
          echo '{"status":"ok","channels":["affiliate-binance","affiliate-algosone"],"note":"Use these links in campaigns & landing."}' > out/revenue-result.json
      - uses: actions/upload-artifact@v4
        with:
          name: revenue-pulse
          path: out/

  # === Khởi tạo Hyperledger/DID (giữ cấu trúc, an toàn) ===
  initialize-hyperledger:
    name: Initialize Hyperledger (guarded)
    needs: [bootstrap, health-check]
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/setup-node@v4
        with:
          node-version: 20
      - name: Guarded init
        env:
          DID_SEED: ${{ secrets.DID_SEED || '' }}
          LLM_API_KEY: ${{ secrets.LLM_API_KEY || '' }}
        run: |
          if [ -z "$DID_SEED" ]; then
            echo "DID_SEED not present. Skipping Ceramic init."
          else
            echo "Ceramic DID would initialize here (guarded)."
          fi

  # === BNB Smart Contract: simulate mint (gas-estimate) ===
  bnb-smart-contract:
    name: BNB Smart Contract Ops
    needs: [initialize-hyperledger]
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/setup-node@v4
        with:
          node-version: 20
      - name: Install Web3
        run: npm i web3@4
      - name: Mint simulate (only if config present)
        env:
          BSC_RPC: https://bsc-dataseed.binance.org
          PRIVATE_KEY: ${{ secrets.TEMP_WALLET_PRIVATE_KEY_BNBCHAIN_0 || '' }}
          CONTRACT_ADDRESS: ${{ vars.BNB_CONTRACT_ADDRESS || '' }}
          CONTRACT_ABI_JSON: ${{ vars.BNB_CONTRACT_ABI_JSON || '' }}
        run: |
          node --input-type=module <<'NODE'
          import Web3 from 'web3'
          const {BSC_RPC,PRIVATE_KEY,CONTRACT_ADDRESS,CONTRACT_ABI_JSON}=process.env
          if(!PRIVATE_KEY||!CONTRACT_ADDRESS||!CONTRACT_ABI_JSON){
            console.log('Missing PK/Address/ABI -> skip.')
            process.exit(0)
          }
          const web3 = new Web3(BSC_RPC)
          const account = web3.eth.accounts.privateKeyToAccount(PRIVATE_KEY)
          web3.eth.accounts.wallet.add(account)
          const contract = new web3.eth.Contract(JSON.parse(CONTRACT_ABI_JSON), CONTRACT_ADDRESS)
          try{
            const data = contract.methods.mintNFT(account.address).encodeABI()
            const gas  = await web3.eth.estimateGas({to:CONTRACT_ADDRESS,data,from:account.address})
            console.log('Estimated gas:', gas)
            const live = (process.env.LIVE||'false').toLowerCase()==='true'
            if(!live){ console.log('LIVE=false -> only estimate.'); }
          }catch(e){ console.error('Sim failed:', e.message); process.exit(1) }
          NODE

  # === Chiến dịch social: đẩy 1 batch, chèn thông điệp chuẩn tuân thủ ===
  social-campaign:
    name: Social Campaign (Affiliate push)
    needs: [revenue-pulse, landing]
    runs-on: ubuntu-latest
    timeout-minutes: 6
    steps:
      - uses: actions/setup-node@v4
        with:
          node-version: 20
      - name: Push batch (log-only if API unset)
        env:
          SOCIAL_API_URL: ${{ env.SOCIAL_API_URL }}
          BINANCE_REF: ${{ needs.bootstrap.outputs.binance_ref }}
          ALGOSONE_REF: ${{ needs.bootstrap.outputs.algosone_ref }}
          LIVE: ${{ env.LIVE }}
        run: |
          cat > social-payload.json <<EOF
          {
            "platforms": ["x","telegram","lens","farcaster"],
            "live": "${LIVE}",
            "message_vi": "Đăng ký sàn giao dịch uy tín. Tự nghiên cứu trước khi đầu tư. Rủi ro có thể mất vốn.\nBinance: ${BINANCE_REF}\nAlgosOne: ${ALGOSONE_REF}",
            "message_en": "Join a reputable exchange. Do your own research. Trading involves risk.\nBinance: ${BINANCE_REF}\nAlgosOne: ${ALGOSONE_REF}",
            "cta": "Signup → KYC → First deposit to unlock offers",
            "wallets": {
              "momo": "${WALLET_MOMO}",
              "vietcombank": "${WALLET_VCB}",
              "paypal": "${WALLET_PAYPAL}",
              "usdt_erc20": "${WALLET_USDT_ERC20}",
              "eth": "${WALLET_ETH}"
            }
          }
          EOF
          echo "SOCIAL PAYLOAD:"
          cat social-payload.json
          # Nếu bạn có SOCIAL_API_URL thực, thêm curl POST tại đây.
          # Mặc định: chỉ log để an toàn (không spam nền tảng).
