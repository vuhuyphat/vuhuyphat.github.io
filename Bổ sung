name: AI X1000 – Scan & Broadcast

on:
  schedule:
    - cron: "*/10 * * * *"   # chạy mỗi 10 phút (UTC)
  workflow_dispatch:

permissions:
  contents: write

concurrency:
  group: ai-x1000
  cancel-in-progress: false

jobs:
  run:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v4
        with:
          persist-credentials: true

      - uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Build latest.json + summary.txt
        shell: bash
        run: |
          node - <<'NODE'
          import fs from 'fs';

          const fetchJson = async (url, opt={}) => {
            const res = await fetch(url, {
              headers: { 'User-Agent': 'ai-x1000-bot', 'Accept': 'application/json' },
              ...opt
            });
            if (!res.ok) throw new Error('HTTP '+res.status);
            return res.json();
          };

          // Cấu hình: ưu tiên cấu hình.json (VN) rồi fallback config.json
          const readCfg = () => {
            for (const p of ['cấu hình.json','config.json']) {
              try { return JSON.parse(fs.readFileSync(p,'utf8')); } catch(e) {}
            }
            return { site:{brand:'LightUnfold'}, feeds:{sources:['coingecko_markets','coinlore_tickers'], top_n:10} };
          };
          const cfg = readCfg();
          const topN = Number(cfg?.feeds?.top_n)||10;

          const sources = {
            async coingecko_markets(){
              const url='https://api.coingecko.com/api/v3/coins/markets?vs_currency=usd&order=volume_desc&per_page=50&page=1&price_change_percentage=1h,24h,7d';
              return fetchJson(url);
            },
            async coinlore_tickers(){
              const j = await fetchJson('https://api.coinlore.net/api/tickers/?start=0&limit=50');
              return j?.data||[];
            }
          };

          const scoreCG = c =>
            (Number(c.price_change_percentage_1h_in_currency)||0)*0.4 +
            (Number(c.price_change_percentage_24h_in_currency)||0)*0.35 +
            (Number(c.price_change_percentage_7d_in_currency)||0)*0.25 +
            Math.log10((Number(c.total_volume)||1));

          const scoreCL = c =>
            (Number(c.percent_change_24h)||0)*0.7 + Math.log10((Number(c.volume24)||1));

          async function compose(){
            let items = [];
            for (const key of (cfg.feeds?.sources||['coingecko_markets'])) {
              try{
                const data = await sources[key]();
                if (key==='coingecko_markets') {
                  items = items.concat(data.map(c=>({
                    source:'coingecko',
                    id:c.id,
                    symbol:c.symbol?.toUpperCase(),
                    name:c.name,
                    price:Number(c.current_price)||0,
                    ch1h:Number(c.price_change_percentage_1h_in_currency)||0,
                    ch24h:Number(c.price_change_percentage_24h_in_currency)||0,
                    ch7d:Number(c.price_change_percentage_7d_in_currency)||0,
                    vol24h:Number(c.total_volume)||0,
                    score: scoreCG(c),
                    link:`https://www.coingecko.com/en/coins/${c.id}`
                  })));
                } else if (key==='coinlore_tickers') {
                  items = items.concat(data.map(c=>({
                    source:'coinlore',
                    id:c.id,
                    symbol:(c.symbol||'').toUpperCase(),
                    name:c.name,
                    price:Number(c.price_usd)||0,
                    ch24h:Number(c.percent_change_24h)||0,
                    vol24h:Number(c.volume24)||0,
                    score: scoreCL(c),
                    link:`https://www.coinlore.com/coin/${(c.name||'').toLowerCase().replace(/\s+/g,'-')}`
                  })));
                }
              }catch(e){ /* skip source error */ }
            }
            const best = {};
            for (const it of items){
              if (!it.symbol) continue;
              const k = it.symbol;
              if (!best[k] || it.score>best[k].score) best[k]=it;
            }
            const out = Object.values(best).sort((a,b)=>b.score-a.score).slice(0,topN);

            const payload = { generated_at:new Date().toISOString(), brand:(cfg.site?.brand||'LightUnfold'), items: out };
            fs.mkdirSync('data',{recursive:true});
            fs.writeFileSync('data/latest.json', JSON.stringify(payload,null,2));

            // ====== TÍCH HỢP DOANH THU: Thanh toán + Affiliate trong summary ======
            const momo   = "0567892030"; // MoMo của bạn
            const vcb    = "9567892030"; // Vietcombank của bạn
            const usdt   = "0x5da80d0f7e2df3cb0aa73d6a942bbe36b046b8f0"; // USDT ERC20
            const paypal = "vumumabada@gmail.com";
            const binance= "https://www.binance.com/referral/earn-together/refer-in-hotsummer/claim?hl=vi&ref=GRO_20338_9V44N";
            const algos1 = "https://algosone.page.link/MbtR";

            const lines = out.map(x=>`${x.symbol}: $${x.price} (${(x.ch24h??0).toFixed(2)}%)`).join(' | ');
            const s = [
              `🔥 TOP: ${lines}`,
              `💰 Thanh toán: MoMo ${momo} | VCB ${vcb} | USDT ERC20 ${usdt} | PayPal ${paypal}`,
              `📈 ĐK Binance: ${binance}`,
              `🤖 ĐK AlgosOne: ${algos1}`
            ].join('\n');
            fs.writeFileSync('data/summary.txt', s);
          }
          await compose();
          NODE

      - name: Commit updated data
        run: |
          git config user.name  "ai-x1000-bot"
          git config user.email "ai-x1000-bot@users.noreply.github.com"
          git add data/*.json data/*.txt || true
          git commit -m "data: refresh $(date -u +'%Y-%m-%dT%H:%M:%SZ')" || echo "no changes"
          git pull --rebase || true
          git push || true

      - name: Broadcast to Telegram (optional)
        if: ${{ secrets.TELEGRAM_BOT_TOKEN && secrets.TELEGRAM_CHAT_ID }}
        env:
          BOT: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          CHAT: ${{ secrets.TELEGRAM_CHAT_ID }}
        run: |
          MSG="$(cat data/summary.txt)"
          curl -s "https://api.telegram.org/bot${BOT}/sendMessage" \
            -d "chat_id=${CHAT}" -d "text=${MSG}" -d "disable_web_page_preview=true" >/dev/null || true

      - name: Broadcast to Discord (optional)
        if: ${{ secrets.DISCORD_WEBHOOK_URL }}
        env:
          WH: ${{ secrets.DISCORD_WEBHOOK_URL }}
        run: |
          MSG="$(sed 's/"/\\"/g' data/summary.txt)"
          curl -s -H "Content-Type: application/json" -X POST \
            -d "{\"content\":\"${MSG}\"}" "$WH" >/dev/null || true

      - name: Broadcast to X/Twitter (optional)
        if: ${{ secrets.X_BEARER_TOKEN }}
        env:
          X_BEARER_TOKEN: ${{ secrets.X_BEARER_TOKEN }}
        run: |
          MSG="$(head -c 270 data/summary.txt)"
          curl -s -X POST "https://api.twitter.com/2/tweets" \
            -H "Authorization: Bearer ${X_BEARER_TOKEN}" \
            -H "Content-Type: application/json" \
            -d "{\"text\":\"${MSG}\"}" >/dev/null || true

      - name: (Optional) Log to Zapier Google Sheets
        if: ${{ secrets.ZAPIER_INCOME_WEBHOOK }}
        env:
          ZAP: ${{ secrets.ZAPIER_INCOME_WEBHOOK }}
        run: |
          NOW="$(date -u +'%Y-%m-%dT%H:%M:%SZ')"
          curl -s -X POST "$ZAP" -H "Content-Type: application/json" \
            -d "{\"timestamp\":\"$NOW\",\"summary\":\"$(sed 's/"/\\"/g' data/summary.txt)\"}" >/dev/null || true
